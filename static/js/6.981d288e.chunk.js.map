{"version":3,"sources":["components/Element.tsx","assets/arrow.svg","components/ColumnContainer.tsx","pages/Stack.tsx"],"names":["Element","module","exports","height","StackWrapper","StackIndex","StackContainer","ColumnContainer","ControllerWrapper","TopWrapper","useState","capacity","setCapacity","arr","setArr","step","setStep","startWithZero","setStartWithZero","topPositon","setTopPosition","pushItem","length","Swal","fire","val","Math","floor","random","toString","key","color","moveTop","size","useEffect","htmlFor","id","type","value","onChange","e","cap","target","Number","isNaN","checked","onClick","setTimeout","slice","Array","map","_","i","v","style","backgroundColor","top","alt","src","arrow","width"],"mappings":"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","file":"static/js/6.981d288e.chunk.js","sourcesContent":["import styled from '@emotion/styled';\n\nconst Element = styled.div`\n  width: 150px;\n  height: 50px;\n  border: 1px solid black;\n  box-sizing: border-box;\n  display: grid;\n  place-items: center;\n`;\n\nexport default Element;\n","module.exports = __webpack_public_path__ + \"static/media/arrow.8198d03b.svg\";","import styled from '@emotion/styled';\n\nexport default styled.div<{height: number}>`\n  width: 150px;\n  height: ${({ height }) => `${50 * height}px`};\n  border: 1px solid black;\n  display: flex;\n  flex-direction: column;\n`;\n","import styled from '@emotion/styled';\nimport React, { useEffect, useState } from 'react';\nimport Swal from 'sweetalert2';\nimport ColumnContainer from '../components/ColumnContainer';\nimport Element from '../components/Element';\nimport { ElementProps } from '../types/element';\nimport arrow from '../assets/arrow.svg';\n\nconst StackWrapper = styled.div`\n  display: flex;\n`;\n\nconst StackIndex = styled.div`\n  display: grid;\n  width: 30px;\n  div {\n    height: 50px;\n    display: grid;\n    place-items: center;\n  }\n`;\n\nconst StackContainer = styled(ColumnContainer)`\n  flex-direction: column-reverse;\n`;\n\nconst ControllerWrapper = styled.div`\n  margin-bottom: 10px;\n`;\n\nconst TopWrapper = styled.div`\n  width: 100px;\n  height: 30px;\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  grid-column-gap: 15px;\n\n  position: absolute;\n  left: 200px;\n  top: 0;\n  transition: 100ms top ease;\n`;\n\nexport default () => {\n  const [capacity, setCapacity] = useState(10);\n  const [arr, setArr] = useState<ElementProps[]>([]);\n  const [step, setStep] = useState(false);\n  const [startWithZero, setStartWithZero] = useState(false);\n  const [topPositon, setTopPosition] = useState(0);\n\n  const push = () => {\n    if (arr.length >= capacity) {\n      Swal.fire('Error', 'Stack Full', 'error');\n      return;\n    }\n    if (startWithZero) {\n      pushItem();\n      setTimeout(() => moveTop(arr.length + 1), +step * 1000);\n    } else {\n      moveTop(arr.length + 1);\n      setTimeout(pushItem, +step * 1000);\n    }\n  };\n\n  const pushItem = () => {\n    if (arr.length >= capacity) {\n      Swal.fire('Error', 'Stack Full', 'error');\n      return;\n    }\n    setArr((arr) => [...arr, {\n      val: Math.floor(Math.random() * 100).toString(),\n      key: Math.floor(Math.random() * (16 ** 8 - 1)).toString(16),\n      color: Math.floor(Math.random() * 16777215).toString(16),\n    }]);\n  };\n\n  const pop = () => {\n    if (arr.length <= 0) {\n      Swal.fire('Error', 'Stack Empty', 'error');\n      return;\n    }\n    if (startWithZero) {\n      moveTop(arr.length - 1);\n      setTimeout(() => setArr((arr) => arr.slice(0, -1)), +step * 1000);\n    } else {\n      setArr((arr) => arr.slice(0, -1));\n      setTimeout(() => moveTop(arr.length - 1), +step * 1000);\n    }\n  };\n\n  const moveTop = (size: number) => {\n    setTopPosition((capacity - size - +startWithZero + 1) * 50 + 60);\n  };\n\n  const changeCapacity = (cap: string) => {\n    if (Number.isNaN(+cap)) {\n      return;\n    }\n    if (+cap < arr.length) {\n      Swal.fire('Error', 'can\\'t resize', 'error');\n      return;\n    }\n    setCapacity(+cap);\n  };\n\n  useEffect(() => {\n    moveTop(arr.length);\n  }, [capacity, startWithZero]);\n\n  return (\n    <>\n      <ControllerWrapper>\n        <div>\n          <label htmlFor=\"capacity\">capacity: </label>\n          <input id=\"capacity\" type=\"number\" value={capacity} onChange={(e) => changeCapacity(e.target.value)} />\n        </div>\n        <div>\n          <label htmlFor=\"step\">step: </label>\n          <input id=\"step\" type=\"checkbox\" checked={step} onChange={(e) => setStep(e.target.checked)} />\n        </div>\n        <div>\n          <label htmlFor=\"start0\">start from 0: </label>\n          <input id=\"start0\" type=\"checkbox\" checked={startWithZero} onChange={(e) => setStartWithZero(e.target.checked)} />\n        </div>\n        <button type=\"button\" onClick={push}>+</button>\n        <button type=\"button\" onClick={pop}>-</button>\n      </ControllerWrapper>\n      <StackWrapper>\n        <StackIndex>\n          {[...Array(capacity + +!startWithZero)].map((_, i) => (\n            <div key={i}>{capacity - i - 1}</div>\n          ))}\n        </StackIndex>\n        <StackContainer height={capacity}>\n          {arr.map((v) => (\n            <Element key={v.key} style={{ backgroundColor: `#${v.color}` }}>{v.val}</Element>\n          ))}\n        </StackContainer>\n      </StackWrapper>\n      <TopWrapper style={{ top: topPositon }}>\n        <img alt=\"top\" src={arrow} width={50} />\n        <div>top</div>\n      </TopWrapper>\n    </>\n  );\n};\n"],"sourceRoot":""}